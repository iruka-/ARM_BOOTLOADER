/***********************************************************************/
/*  													               */
/*      PROJECT NAME :  tstRx                                          */
/*      FILE         :  reset_program.asm                              */
/*      DESCRIPTION  :  Reset Program                                  */
/*      CPU SERIES   :  RX600                                          */
/*      CPU TYPE     :  RX62N                                          */
/*  													               */
/*      This file is generated by KPIT Eclipse.                        */
/*  													               */
/***********************************************************************/                                                                        


	/*reset_program.asm*/

#	.list
	.section .text
	.global _PowerON_Reset    /*global Start routine */
	
#ifdef CPPAPP	
___dso_handle:
	.global ___dso_handle
#endif	

	.extern _iniHardware  /*external Sub-routine to initialise Hardware*/
	.extern _data
	.extern _mdata
	.extern _ebss
	.extern _bss
	.extern _edata
	.extern _main 
	.extern _ustack
	.extern _istack
	.extern _rvectors
#if GDB_SIMULATOR_DEBUG
	.extern _exit
#endif

	
_PowerON_Reset :
/* initialise user stack pointer */
;;;	mvtc	#_ustack,USP

/* initialise interrupt stack pointer */
	mvtc	#_istack,ISP

/* setup intb */
	mvtc	#_rvectors_start, intb	/* INTERRUPT VECTOR ADDRESS  definition	*/

/* setup FPSW */
	mvtc    #100h, fpsw

/* load data section from ROM to RAM */

	mov     #_mdata,r2      /* src ROM address of data section in R2 */
	mov     #_data,r1       /* dest start RAM address of data section in R1 */
	mov     #_edata,r3      /* end RAM address of data section in R3 */
	sub    r1,r3            /* size of data section in R3 (R3=R3-R1) */
	smovf                   /* block copy R3 bytes from R2 to R1 */

/* bss initialisation : zero out bss */

	mov	#00h,r2  	/* load R2 reg with zero */
	mov	#_ebss, r3  /* store the end address of bss in R3 */
	mov	#_bss, r1 	/* store the start address of bss in R1 */
	sub   r1,r3	   	/* size of bss section in R3 (R3=R3-R1) */
	sstr.b
#if 1 /*ifndef GDB_SIMULATOR_DEBUG*/
/* call the hardware initialiser */
	bsr.a	_iniHardware
	nop

/* setup PSW */
    ;PSW.27-24	IPL
    ;   .20	PM	Processor Mode (0/1)=(supervisor/user)
    ;   .17	U	stack pointer (0/1)=(ISP/USP)
    ;   .16	I	Interrupt(0/1)=(DI/EI)
    ;
	mvtc	#1<<16, psw	/* SUPER,ISP,EI for PSW */

#if 0
/* change PSW PM to user-mode */
	MVFC   PSW,R1
	OR     #1<<20,R1	;PM=1(1=userMode)
	PUSH.L R1		;push PSW for 'rte'
	MVFC   PC,R1		;3 PC points to this instruction
lbl:
	ADD	#10,R1		;2 bytes (point to ***)
	PUSH.L R1		;2 bytes (push PC for 'rte')
	RTE			;2 bytes
	NOP			;1 byte (***)
	NOP			;1 byte
/* PM=1(user),U=0(ISP),I=1(EI) */
#endif
#endif
	bsr.a	_main
	
/* call to exit*/
_exit:
;	bsr.a 	_exit
	bra	_exit

	.section .istack
	.space	512

;;;	.section .ustack
;;;	.space	512

	.end
